// Generated by Selenium IDE
package io.demo.product;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.Duration;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;

import jakarta.annotation.PostConstruct;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class VueTest {

  private WebDriver driver;
  @LocalServerPort
  private int port;
  private String baseURL;
  private ChromeOptions options = new ChromeOptions();
  @PostConstruct
  void init() {
    options.addArguments("--no-sandbox");
    options.addArguments("--disable-dev-shm-usage");
    options.addArguments("--headless");
    baseURL = "http://localhost:" + port;
  }

  @BeforeEach
  void setUp() {
    driver = new ChromeDriver(options);
  }

  @AfterEach
  void tearDown() {
    driver.quit();
  }

  @Test
  void login() {
    driver.get(baseURL + "/vue/dashboard");
    driver.manage().window().setSize(new Dimension(1920, 1120));
    driver.navigate().refresh();
    driver.findElement(By.name("username")).sendKeys("user");
    driver.findElement(By.name("password")).sendKeys("password");
    driver.findElement(By.name("password")).sendKeys(Keys.ENTER);
    driver.findElement(By.linkText("Fakturaer")).click();
    driver.findElement(By.linkText("Dashbord")).click();
    driver.findElement(By.cssSelector(".switch")).click();
    driver.findElement(By.cssSelector(".switch")).click();
    driver.findElement(By.cssSelector(".bottom-content a > .text")).click();
    driver.close();
  }

  @Test
  void loginError() {
    driver.get(baseURL + "/vue/login");
    driver.manage().window().setSize(new Dimension(1920, 1120));
    driver.findElement(By.name("username")).sendKeys("user");
    driver.findElement(By.name("password")).sendKeys("12345667");
    driver.findElement(By.name("password")).sendKeys(Keys.ENTER);
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".Toastify__toast-body > div")));
    assertEquals("Ugyldig brukernavn eller passord",
        driver.findElement(By.cssSelector(".Toastify__toast-body > div")).getText());
    driver.findElement(By.name("username")).sendKeys("user");
    driver.findElement(By.name("password")).sendKeys("password");
    driver.findElement(By.name("password")).sendKeys(Keys.ENTER);
    driver.close();
  }
}
